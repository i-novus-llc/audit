<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">

    <changeSet id="AUDIT-171_create_audit_event_type_insert_function" author="agaifutdinov" dbms="postgresql">
        <createProcedure>
            CREATE OR REPLACE FUNCTION audit.audit_event_type_insert_trigger()
            RETURNS TRIGGER AS $$
            DECLARE
                audit_type int2;
                partition_name TEXT;
            BEGIN
                audit_type := NEW.audit_type_id;
                partition_name := format('audit_event_type_%s', audit_type);
            IF NOT EXISTS
                (SELECT 1
                FROM information_schema.tables
                WHERE table_schema = 'audit' AND table_name = partition_name)
            THEN
                EXECUTE format('CREATE TABLE audit.%I
                (CHECK (audit_type_id = ''%s''))
                INHERITS (audit.audit_event_type)', partition_name, audit_type);
            END IF;
            EXECUTE format('INSERT INTO audit.%I (id, name, audit_type_id)
            VALUES($1, $2, $3)', partition_name)
            using NEW.id, NEW.name, NEW.audit_type_id;
            RETURN NULL;
            END
            $$
            LANGUAGE plpgsql;
        </createProcedure>
        <rollback>
            <sql>
                DROP FUNCTION IF EXISTS audit.audit_event_type_insert_trigger();
            </sql>
        </rollback>
    </changeSet>

    <changeSet id="AUDIT-171_create_audit_event_type_insert_trigger" author="agaifutdinov" dbms="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="f">
                select exists(select 1 from pg_trigger where tgname='audit_event_type_insert_trigger');
            </sqlCheck>
        </preConditions>
        <sql>
            CREATE TRIGGER audit_event_type_insert_trigger
            BEFORE INSERT ON audit.audit_event_type
            FOR EACH ROW EXECUTE PROCEDURE audit.audit_event_type_insert_trigger();
        </sql>
        <rollback>
            DROP TRIGGER IF EXISTS audit_event_type_insert_trigger;
        </rollback>
    </changeSet>
</databaseChangeLog>